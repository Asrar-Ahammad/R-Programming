setwd("/Users/shaikmohammadasrarahammad/Downloads/Crescent_subjects/sem6/DataAnalytics/R")
data = datasets::mtcars
View(data)
install.packages('dplyr')
library(dplyr)
model<-lm
model<-lm(formula = mpg ~ wt, data = data)
summary(model)
prediction<-predict(model)
plot(data$wt, data$mpg, main = "Car mpg vs Weight", xlab = 'Weight', ylab = 'Miles per Gallon')
abline(model, col = "red")
View(data)
data = datasets::mtcars
View(data)
data$am <- ifelse(data$am == 1, 1, 0)
model <- glm(am ~ wt, data = data)
summary(model)
plot(data$wt, data$wt, main = "Car Transmission type vs Weight", xlab = "Weight", ylab = "Car Transsmission" )
curve(predict(model, data.frame(wt=x),type = 'response'),add = True, col = 'red')
curve(predict(model, data.frame(wt=x),type = 'response'),add = TRUE, col = 'red')
plot(data$wt, data$wt, main = "Car Transmission type vs Weight", xlab = "Weight", ylab = "Car Transsmission" )
curve(predict(model, data.frame(wt=x),type = 'response'),add = TRUE, col = 'red')
plot(data$wt, data$wt, main = "Car Transmission type vs Weight", xlab = "Weight", ylab = "Car Transsmission", xlim = range(mtcars$wt) )
curve(predict(model, data.frame(wt=x),type = 'response'),add = TRUE, col = 'red')
# Load the mtcars dataset
data(mtcars)
# Convert the response variable into a binary variable
mtcars$am <- ifelse(mtcars$am == 1, 1, 0)
# Fit a logistic regression model
model <- glm(am ~ wt, data = mtcars, family = binomial)
# Print the summary of the model
summary(model)
# Make predictions using the model
predictions <- predict(model, type = "response")
# Plot the data and the logistic regression curve
plot(mtcars$wt, mtcars$am, main = "Car Transmission Type vs Weight", xlab = "Weight", ylab = "Transmission Type", xlim = range(mtcars$wt))
curve(predict(model, data.frame(wt = x), type = "response"), add = TRUE, col = "red")
data = datasets::mtcars
View(data)
data$am <- ifelse(data$am == 1, 1, 0)
model <- glm(am ~ wt, data = data,family = 'binomial' )
summary(model)
predictions <- predict(mode, type = 'response')
plot(data$wt, data$wt, main = "Car Transmission type vs Weight", xlab = "Weight", ylab = "Car Transsmission", xlim = range(mtcars$wt) )
curve(predict(model, data.frame(data$wt=x),type = 'response'),add = TRUE, col = 'red')
data = datasets::mtcars
sum(is.na(data))
data = na.omit(data)
sum(is.na(data))
View(data)
split = sample.split(data$am, SplitRatio = 0.75)
train = subset(split==TRUE)
train = subset(data,split==TRUE)
split = sample.split(data$am, SplitRatio = 0.75)
split = sample.split(data$am, SplitRatio = 0.75)
split = sample(data$am, SplitRatio = 0.75)
install.packages("caTools","caret","lattice","clusterR","fpc")
install.packages("caTools")
install.packages("lattice")
install.packages("caret")
library(caTools)
split = sample.split(data$am, SplitRatio = 0.75)
train = subset(data,split==TRUE)
test = subset(datasplit==FALSE)
test = subset(data,split==FALSE)
model <- glm(am~wt, data = data, family = 'binomial')
pred <- predict(model, test, type = 'response')
pred <- predict(model, test, type = 'response')
pred <- ifelse(pred>0.5, 1, 0)
pred <- predict(model, test, type = 'response')
pred <- ifelse(pred>0.5, 1, 0)
accuracy = 1 - mean(pred != df$am)
accuracy = 1 - mean(pred != test$am)
print("accuracy :",accuracy)
print(paste("accuracy :",accuracy))
print(paste(Accuracy :",accuracy*100))
accuracy = (1 - mean(pred != test$am))*100
print(paste(Accuracy :",accuracy))
accuracy = (1 - mean(pred != test$am))*100
print(paste("Accuracy :",accuracy))
data = datasets::mtcars
data = na.omit(df)
data = na.omit(data)
data = datasets::mtcars
data = na.omit(data)
sum(is.na(data))
train = subset(data, split == TRUE)
test = subset(data, split==FALSE)
split = sample.split(data$mpg, SplitRatio = 0.7)
train = subset(data, split == TRUE)
test = subset(data, split==FALSE)
model <- lm(mpg~wt,data = train)
predict <- predict(model, newdata = test)
plot(test$wt, test$mpg, main = "Weight vs Miles per Gallon", xlab = "Weight", ylab = "MPG")
abline(model, col='red')
plot(test$wt, test$am, main = "AM vs Weight", xlab = "Weight", ylab = "Transmission Type")
curve(predict(model, data.frame(wt = x), type = "response"), add = TRUE, col = "red")
curve(pred, add = TRUE, col = "red")
data = datasets::iris
View(data)
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = seq(0, len(unique(data$Species))-1))
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = seq(0, length(unique(data$Species))-1))
View(data)
data = na.omit(data)
sum(is.na(data))
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split==TRUE)
test = subset(data, split==FALSE)
model <- kmeans(train[,1:4], centers = 3, nstart = 10)
model
summary(model)
conf = table(model$cluster, data$Species)
conf
conf = table(model$cluster, train$Species)
conf
setwd("/Users/shaikmohammadasrarahammad/Downloads/Crescent_subjects/sem6/DataAnalytics/R")
conf = table(model$cluster, test$Species)
conf = table(model$cluster, train$Species)
conf
plot(data$Sepal.Length, data$Petal.Length)
plot(data$Sepal.Length, data$Petal.Length,pch=19)
plot(data$Sepal.Length, data$Petal.Length, col=model$cluster, pch=19)
plot(data$Sepal.Length, data$Sepal.Width, col=model$cluster, pch=19, )
plot(data$Sepal.Length, data$Sepal.Width, col=model$cluster, pch=19,main= 'K Means clusters' )
plot(data$Petal.Length, data$Petal.Width, col = model$cluster, pch=19, main = 'Kmeans clusters')
plot(data[,1:2], col=model$cluster, pch=8,main='kmeans clustering of iris data')
plot(data[,1:2], col=model$cluster, pch=10,main='kmeans clustering of iris data')
plot(data[,1:2], col=model$cluster, pch=1,main='kmeans clustering of iris data')
plot(data[,1:2], col=model$cluster, pch=5,main='kmeans clustering of iris data')
plot(data[,1:2], col=model$cluster, pch=2,main='kmeans clustering of iris data')
plot(data[,1:2], col=model$cluster, pch=15,main='kmeans clustering of iris data')
plot(data[,1:2], col=model$cluster, pch=16,main='kmeans clustering of iris data')
points(model$centers[,1:2], col=1:3, pch=16, cex=2)
points(model$centers[,1:2], col=1:3, pch=15, cex=2)
points(model$centers[,1:2], col=1:3, pch=1, cex=2)
points(model$centers[,1:2], col=1:3, pch=1, cex=2)
points(model$centers[,1:2], col=1:3, pch=1)
points(model$centers[,1:2], col=1:3, pch=1,cex =2)
points(model$centers[,1:2], col=1:3, pch=19,cex =2)
plot(data[,1:2], col=model$cluster, pch=16,main='kmeans clustering of iris data')
points(model$centers[,1:2], col=1:3, pch=19,cex =2)
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split==TRUE)
test = subset(data, split==FALSE)
model <- kmeans(train[,1:4], centers = 3)
model
summary(model)
conf = table(model$cluster, train$Species)
conf
plot(data$Sepal.Length, data$Petal.Length,pch=19)
plot(data$Sepal.Length, data$Sepal.Width, col=model$cluster, pch=19,main= 'K Means clusters' )
plot(data$Petal.Length, data$Petal.Width, col = model$cluster, pch=19, main = 'Kmeans clusters')
plot(data[,1:2], col=model$cluster, pch=16,main='kmeans clustering of iris data')
points(model$centers[,1:2], col=1:3, pch=19,cex =2)
data = datasets::iris
data = na.omit(data)
sum(is.na(data))
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = (0,length(unique(data$Species))-1))
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = seq(0,length(unique(data$Species))-1))
View(data)
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split ==TRUE)
test = subset(data, split==FALSE)
library(caTools)
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split ==TRUE)
test = subset(data, split==FALSE)
library(dplyr)
library(ggplot2)
model <- dbscan(train[1:4], minpts=10, eps=15)
library(lattice)
install.packages('tidyverse')
library(tidyverse)
install.packages('dbscan')
library(dbscan)
model <- dbscan(train[1:4], minpts=10, eps=15)
model <- dbscan(train[1:4],minPts = 15,eps = 5)
data<-scale(data[,1:4])
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split ==TRUE)
test = subset(data, split==FALSE)
library(dbscan)
model <- dbscan(train[1:4],minPts = 5,eps = 0.5)
model <- dbscan(train,minPts = 5,eps = 0.5)
plot(model, data)
data = datasets::iris
data = na.omit(data)
sum(is.na(data))
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = seq(0,length(unique(data$Species))-1))
View(data)
data_scaled<-scale(data[,1:4])
library(dbscan)
model <- dbscan(data_scaled,minPts = 5,eps = 0.5)
plot(model, data)
plot(model, data_scaled)
# Load the iris dataset
data(iris)
# Scale the data
iris_scaled <- scale(iris[, 1:4])
# Perform DBSCAN clustering
library(dbscan)
dbscan_model <- dbscan(iris_scaled, eps = 0.5, minPts = 5)
# Visualize the results
plot(dbscan_model, iris_scaled)
nrow(iris_scaled) == length(dbscan_model$cluster)
# Visualize the results
plot(dbscan_model, iris_scaled)
# Visualize the results
plot(dbscan_model$cluster, iris_scaled)
nrow(data)
install.packages(c("class", "httr", "KernSmooth", "MASS", "nnet"))
data = datasets::iris
data = na.omit(data)
sum(is.na(data))
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = seq(0,length(unique(data$Species))-1))
View(data)
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split ==TRUE)
test = subset(data, split==FALSE)
library(dbscan)
model <- dbscan(data[,1:4],minPts = 5,eps = 0.5)
model$cluster
cm = table(model$cluster, data$Species)
cm
plot(model,data[,1:4], main='DBSCAN')
plot(model,data[1:4], main='DBSCAN')
model <- dbscan(data[1:4],minPts = 5,eps = 0.5)
model$cluster
cm = table(model$cluster, data$Species)
cm
plot(model,data[1:4], main='DBSCAN')
plot(model$cluster,data[1:4], main='DBSCAN')
model$borderPoints
View(data[1;4])
View(data[1:4])
View(data[,1:4])
data=datasets::iris
data=datasets::iris
data_scaled = scale(data[1:4])
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = seq(0,len(unique(data$Species))-1))
data$Species = factor(data$Species,
levels = unique(data$Species),
labels = seq(0,length(unique(data$Species))-1))
View(data)
View(data_scaled)
distance_matrix = dist(data_scaled)
model<- hclust(distance_matrix, method = 'ward.D2')
plor(model)
plot(model)
model<- hclust(distance_matrix, method = 'complete')
plot(model)
data=datasets::USArrests
View(data)
data_scaled = scale(data)
# data$Species = factor(data$Species,
#                       levels = unique(data$Species),
#                       labels = seq(0,length(unique(data$Species))-1))
View(data)
View(data_scaled)
distance_matrix = dist(data_scaled)
model<- hclust(distance_matrix, method = 'complete')
plot(model)
abline(model, col='red',lwd=2)
plot(model)
abline(model, col='red',lwd=2)
model<- hclust(distance_matrix, method = 'average')
plot(model)
install.packages('rpart')
library(rpart)
tree_model <- rpart(Species~., data = data)
data = datasets::iris
tree_model <- rpart(Species~., data = data)
plot(tree_model)
text(tree_model)
new_Data <- data.frame(Sepal.Length=5.1, Sepal.Width=3.5,Petal.Length=1.4, Petal.Width=0.2)
predict(tree_model, newdata = new_Data, type='class')
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split==TRUE)
test = subste(data, split==FALSE)
tree_model <- rpart(Species~., data = train)
test = subset(data, split==FALSE)
tree_model <- rpart(Species~., data = train)
plot(tree_model)
text(tree_model)
predict(tree_model, newdata = test)
cm = table(predictions, test)
predictions <- predict(tree_model, newdata = test)
cm = table(predictions, test)
cm
new_Data <- data.frame(Sepal.Length=5.1, Sepal.Width=3.5,Petal.Length=1.4, Petal.Width=0.2)
predict(tree_model, newdata = new_Data, type='class')
new_Data <- data.frame(Sepal.Length=5.1, Sepal.Width=3.5,Petal.Length=2.46, Petal.Width=1.56)
predict(tree_model, newdata = new_Data, type='class')
library(e1071)
data = dataset::iris
data = datasets::iris
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split==TRUE)
test = subset(data, split==FALSE)
model <- naiveBayes(Species~.,data = train)
pred <- predict(model, newdata = test[1:4])
accuracy <- sum(pred == test$Species)/nrow(test)
print(paste('Accuracy',accuracy))
library(e1071)
data = datasets::iris
split = sample.split(data$Species, SplitRatio = 0.7)
trian = subset(data, split==TRUE)
train = subset(data, split==TRUE)
View(train)
View(trian)
View(trian)
View(trian)
View(trian)
View(trian)
test = subset(data, split==FALSE)
model<-svm(Species~., data = data)
pred <- predict(model, newdata = test[1:4])
accuracy<- sum(pred == test$Species)/nrow(test)
print(paste('Accuracy :',accuracy))
install.packages('randomForest')
library(randomForest)
rfNews()
data = datasets::iris
gc()
data = datasets::iris
split = sample.split(data$Species, SplitRatio = 0.7)
train = subset(data, split==TRUE)
test = subset(data, split==FALSE)
model<-randomForest(Species~., data = train)
pred<-predict(model, test[1:4])
accuracy<-sum(pred==test$Species)/nrow(test)
print('Accuracy :',accuracy)
print(paste('Accuracy :',accuracy))
plot(model)
library(caret)
cm = confusionMatrix(pred, test$Species)
cm
cm$table
setwd("/Users/shaikmohammadasrarahammad/Downloads/Crescent_subjects/sem6/DataAnalytics/R")
data = datasets::iris
boxplot(data[1:4])
boxplot(data[1:4], col = data)
plot(data[1:4])
barplot(data[5])
barplot(data[1:4])
barplot(table(iris$Species))
library('ggplot2')
library('lattice')
# Boxplot
boxplot(Sepal.Length~Species, data=data,
main='Box plot of sepal length by species',
xlab = 'Sepal Length', ylab = 'Species')
# Scatter plot
ggplot(data,aes(Sepal.length, Sepal.Width, color = Species))+geom_point()+labs(title = 'Sepal Length vs Sepal Width', x='Sepal Length',y='Sepal Width')
data = datasets::iris
# Scatter plot
ggplot(data,aes(Sepal.Length, Sepal.Width, color = Species))+geom_point()+labs(title = 'Sepal Length vs Sepal Width', x='Sepal Length',y='Sepal Width')
+labs(title = 'Sepal Length vs Sepal Width', x='Sepal Length',y='Sepal Width')
# Barchart
ggplot(data, aes(Species, fill= Species))+geom_bar()+labs(title = 'Species')
# Scatter plot using lattice package
xyplot(Sepal.Length~Sepal.Width, data=data,groups = Species,
main='Scatter Plot of Sepal Length vs Sepal width',xlab = 'Sepal Length',
ylab='Sepal Width')
# Scatter plot using lattice package
xyplot(Sepal.Length~Sepal.Width, data=data,groups = Species,
main='Scatter Plot of Sepal Length vs Sepal width',xlab = 'Sepal Length',
ylab='Sepal Width',pch=19)
data = datasets::diamonds
data = datasets::diamonds
install.packages('diamonds')
data("diamonds")
View(diamonds)
diamonds$cut = factor(diamonds$cut,
levels = unique(diamonds$cut),
labels = seq(0,length(unique(diamonds$cut)-1)))
diamonds$cut = factor(diamonds$cut,
levels = unique(diamonds$cut),
labels = seq(0,length(unique(diamonds$cut))-1))
View(diamonds)
data("diamonds")
View(diamonds)
ggplot(diamonds,aes(cut,fill=cut))+geom_bar()+labs(title='Types of cuts')
# Scatterplot
ggplot(diamonds,aes(caret,price,color=cut))+geom_point()+labs(title = 'Caret vs Price')
# Scatterplot
ggplot(diamonds,aes(carat,price,color=cut))+geom_point()+labs(title = 'Caret vs Price')
# Scatterplot
ggplot(diamonds[:,:1000],aes(carat,price,color=cut))+geom_point()+labs(title = 'Caret vs Price')
# Scatterplot
ggplot(diamonds[1:1000,],aes(carat,price,color=cut))+geom_point()+labs(title = 'Caret vs Price')
# Scatterplot
ggplot(diamonds[1:10000,],aes(carat,price,color=cut))+geom_point()+labs(title = 'Caret vs Price')
# Scatterplot
ggplot(diamonds[1:5000,],aes(carat,price,color=cut))+geom_point()+labs(title = 'Caret vs Price')
# Scatterplot
ggplot(diamonds,aes(carat,price,color=cut))+geom_point()+labs(title = 'Caret vs Price')
# Box plot
boxplot(price~cut, data=diamonds,col=cut)
# Box plot
boxplot(price~cut, data=diamonds)
View(CO2)
# Box plot
boxplot(CO2$conc, CO2$Plant)
data("co2")
View(CO2)
# Box plot
boxplot(CO2$conc, CO2$Plant)
force(co2)
# Scatter plot
ggplot(CO2, aes(conc, uptake,color=Plant))+geom_point()+labs(title = 'Conc vs Uptake')
# Barchart
ggplot(CO2,aes(Type,fill=Type))+geom_bar()+labs(title = 'Type')
install.packages('pheatmap')
library(pheatmap)
co2_matrix <- acast(co2, Plant ~ index, value.var = "CO2")
library(reshape2)
co2_matrix <- acast(co2, Plant ~ index, value.var = "CO2")
co2_matrix <- acast(CO2, Plant ~ index, value.var = "CO2")
co2_matrix <- acast(CO2, Plant ~ index)
ggplot(CO2,aes(conc,uptake))+geom_tile()+labs(title = 'Heatmap between Cons and uptake')
# Create a matrix of CO2 values by Plant and Time
co2_matrix <- tapply(co2$CO2, list(co2$Plant, co2$index), mean)
